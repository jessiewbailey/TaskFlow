# TaskFlow Docker Compose Configuration
# 
# SECURITY NOTE: This file uses environment variables with fallback defaults.
# For production, create a .env file with proper credentials (see .env.example)
# Do NOT use the default passwords in production!

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-taskflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_password}
      POSTGRES_DB: ${POSTGRES_DB:-taskflow_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql/init-complete.sql:/docker-entrypoint-initdb.d/01-init-complete.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-taskflow_user} -d ${POSTGRES_DB:-taskflow_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Ollama for AI processing
  ollama:
    image: ollama/ollama:latest
    container_name: taskflow-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_DEBUG=1
      - OLLAMA_VERBOSE=1
    # GPU support configuration
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - taskflow-network

  # Model puller - downloads the model on startup
  ollama-puller:
    image: ollama/ollama:latest
    container_name: taskflow-ollama-puller
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://ollama:11434
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
        echo 'Waiting for Ollama to be ready...' &&
        sleep 10 &&
        echo 'Pulling gemma3:1b model...' &&
        ollama pull gemma3:1b &&
        echo 'Model pull completed successfully!'
      "
    networks:
      - taskflow-network

  # Backend API
  taskflow-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskflow-api
    user: "0:0"  # Run as root to access Docker socket
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-taskflow_user}:${POSTGRES_PASSWORD:-taskflow_password}@postgres:5432/${POSTGRES_DB:-taskflow_db}
      - AI_WORKER_URL=http://taskflow-ai:8001
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - taskflow-network

  # AI Worker
  taskflow-ai:
    build:
      context: ./ai-worker
      dockerfile: Dockerfile
    container_name: taskflow-ai
    ports:
      - "8001:8001"
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - MODEL_NAME=gemma3:1b
      - BACKEND_API_URL=http://taskflow-api:8000
    volumes:
      - ./config:/app/config:ro
    depends_on:
      ollama:
        condition: service_healthy
      taskflow-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - taskflow-network

  # Frontend
  taskflow-web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskflow-web
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    volumes:
      - ./config:/app/config:ro
    depends_on:
      - taskflow-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - taskflow-network

volumes:
  postgres_data:
  ollama_data:

networks:
  taskflow-network:
    driver: bridge